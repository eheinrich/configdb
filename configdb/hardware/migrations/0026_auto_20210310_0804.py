# Generated by Django 3.0.6 on 2021-03-10 08:04

from django.db import migrations

TYPES_WITH_ACQUISITION_OFF = ['LAMP_FLAT', 'ARC', 'AUTO_FOCUS', 'NRES_BIAS', 'NRES_DARK', 'BIAS', 'DARK', 'SCRIPT']
TYPES_WITHOUT_OPTICAL_ELEMENTS = ['BIAS', 'DARK', 'SCRIPT']
DEFAULT_CONFIG_FRONT_PADDING = 16.0
SPECTRA_TYPES = ['SOAR_GHTS_REDCAM', 'SOAR_GHTS_BLUECAM', '1M0-NRES-COMMISSIONING', '0M8-NRES-SCICAM', '1M0-NRES-SCICAM', '2M0-FLOYDS-SCICAM']

def forward(apps, schema_editor):
    # Fill in the configuration_type_links from the existing configuration_types in each instrument_type
    InstrumentType = apps.get_model('hardware', 'InstrumentType')
    ConfigurationType = apps.get_model('hardware', 'ConfigurationType')
    ConfigurationTypeProperties = apps.get_model('hardware', 'ConfigurationTypeProperties')

    if InstrumentType.objects.count() > 0:
        InstrumentCategory = apps.get_model('hardware', 'InstrumentCategory')
        image_category, _ = InstrumentCategory.objects.get_or_create(code='IMAGE')
        spectra_category, _ = InstrumentCategory.objects.get_or_create(code='IMAGE')

    instrument_types = InstrumentType.objects.all()
    for instrument_type in instrument_types:
        # for each configuration_type, create a ConfigurationType and add it to configuration_type_links
        for configuration_type in instrument_type.configuration_types:
            config_type_model, _ = ConfigurationType.objects.get_or_create(
                code=configuration_type,
                name=configuration_type
            )
            ConfigurationTypeProperties.objects.get_or_create(
                configuration_type=config_type_model,
                instrument_type=instrument_type,
                requires_optical_elements=configuration_type not in TYPES_WITHOUT_OPTICAL_ELEMENTS,
                force_acquisition_off=configuration_type in TYPES_WITH_ACQUISITION_OFF
            )
        instrument_type.config_front_padding = DEFAULT_CONFIG_FRONT_PADDING
        instrument_type.instrument_category = spectra_category if instrument_type.code.upper() in SPECTRA_TYPES else image_category
        instrument_type.save()


class Migration(migrations.Migration):

    dependencies = [
        ('hardware', '0025_auto_20210310_0754'),
    ]

    operations = [
        migrations.RunPython(forward)
    ]
